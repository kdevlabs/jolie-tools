[
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "get_friendly_http_error_message",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_friendly_http_error_message(status_code: int) -> str:\n    \"\"\"Provides a non-technical explanation for common HTTP status codes.\"\"\"\n    if status_code == 404:\n        return \"404 Not Found - The page could not be found.\"\n    elif status_code == 403:\n        return \"403 Forbidden - Access is denied.\"\n    elif status_code == 500:\n        return \"500 Internal Server Error - The server encountered an unexpected condition.\"\n    # Add more status codes as needed\n    else:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def app():\n    st.title(\"Razer Link Checker\")\n    start_url = st.text_input(\"Enter start URL\", value=\"https://www.razer.com/\")\n    max_depth = st.number_input(\"Max crawl depth\", value=3, min_value=1)\n    if st.button(\"Start Checking...\"):\n        results = asyncio.run(crawl(start_url, max_depth))\n        if not results.empty:\n            st.dataframe(results)\n        else:\n            st.write(\"No links found or all fetch attempts failed.\")",
        "detail": "app",
        "documentation": {}
    }
]